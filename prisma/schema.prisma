// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id String @unique @id @default(uuid())
  clerkUserId String @unique //User id from clerk
  email String @unique
  name String?
  imageUrl String?
  industry String? 
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Profile to be filled during onboarding
  bio String?
  experience Int?
  skills String[]

  assessment Assessment[]
  resume  Resume?
  coverLetter CoverLetter[]
}

model IndustryInsight{
  id String @id @default(uuid())
  industry String @unique
  users User[]
  salaryRanges Json[] //{role, min, max,median,location}

  //Industry insights
  growthRate Float
  demandLevel DemandLevel //High, Medium, Low
  topSkills String[] //Most in demand skills

  //Market Condition
  marketOutlook MarketOutlook //Positive, Neutral, Negative
  keyTrends String[]

  //Learning Suggestions
  recommendedSkills String[]

  lastUpdated DateTime @default(now())
  nextUpdate DateTime //Scheduled update time
  
}

model Assessment{
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  quizScore Float 
  questions Json[] //{question,answer,userAnswer,isCorrect}
  category String
  improvementTip String? //Generated via AI
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  status          String    @default("draft") // draft, completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}
model Resume {
  id          String    @id @default(cuid())
  userId      String    @unique    // One resume per user
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text // Markdown content
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


enum DemandLevel{
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE
}